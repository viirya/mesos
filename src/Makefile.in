# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile.

SHELL = '/bin/sh'

SRCDIR = @srcdir@
INCLUDEDIR = @top_builddir@/include
BINDIR = @top_builddir@/bin
LIBDIR = @top_builddir@/lib
CONFDIR = @top_builddir@/conf
DEPLOYDIR = @top_builddir@/deploy

CC = @CC@
CXX = @CXX@

PROTOC=@top_builddir@/third_party/protobuf-2.3.0/src/protoc

CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@

OS_NAME = @OS_NAME@

JAVA_HOME = @JAVA_HOME@
JAVA_HEADERS = @JAVA_HEADERS@

PYTHON_HEADERS = @PYTHON_HEADERS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@

WITH_WEBUI = @WITH_WEBUI@

WEBUI_CFLAGS = @WEBUI_CFLAGS@
WEBUI_CXXFLAGS = @WEBUI_CXXFLAGS@
WEBUI_LDFLAGS = @WEBUI_LDFLAGS@

WITH_ZOOKEEPER = @WITH_ZOOKEEPER@

WITH_INCLUDED_ZOOKEEPER = @WITH_INCLUDED_ZOOKEEPER@

BOOST = third_party/boost-1.37.0
PROTOBUF = third_party/protobuf-2.3.0
GLOG = third_party/glog-0.3.1
ZOOKEEPER = third_party/zookeeper-3.3.1/src/c
LIBPROCESS = third_party/libprocess
LIBEV = $(LIBPROCESS)/third_party/libev-3.8

# Ensure that we get better debugging info.
CFLAGS += -g
CXXFLAGS += -g

# Add source dir and build dir to CFLAGS and CXXFLAGS.
CFLAGS += -I$(SRCDIR) -I.
CXXFLAGS += -I$(SRCDIR) -I.

# Add include and build include to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/include -I$(INCLUDEDIR)
CXXFLAGS += -I@top_srcdir@/include -I$(INCLUDEDIR)

# Add boost to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/third_party/boost-1.37.0
CXXFLAGS += -I@top_srcdir@/third_party/boost-1.37.0

# Add protobuf to include and lib paths.
CXXFLAGS += -I@top_srcdir@/$(PROTOBUF)/src
LDFLAGS += -L@top_builddir@/$(PROTOBUF)/src/.libs

# Add glog to include and lib paths.
CXXFLAGS += -I@top_srcdir@/$(GLOG)/src -I@top_builddir@/$(GLOG)/src
LDFLAGS += -L@top_builddir@/$(GLOG)/.libs

# Add libprocess to CFLAGS, CXXFLAGS, and LDFLAGS.
CFLAGS += -I@top_srcdir@/$(LIBPROCESS)/include
CXXFLAGS += -I@top_srcdir@/$(LIBPROCESS)/include
LDFLAGS += -L@top_builddir@/$(LIBPROCESS)

# Add libev to LDFLAGS.
LDFLAGS += -L@top_builddir@/$(LIBEV)/.libs

# Add included ZooKeeper to include and lib paths if necessary.
ifeq ($(WITH_INCLUDED_ZOOKEEPER),1)
  CXXFLAGS += -I@top_srcdir@/$(ZOOKEEPER)/include -I@top_srcdir@/$(ZOOKEEPER)/generated
  LDFLAGS += -L@top_builddir@/$(ZOOKEEPER)/.libs
endif

# Add dependency tracking to CFLAGS, CXXFLAGS.
CFLAGS += -MMD -MP
CXXFLAGS += -MMD -MP

# Add protobuf, glog, libev, libprocess, pthread, and dl to LIBS.
LIBS += -lprotobuf -lglog -lprocess -lev -lpthread -ldl

# Add ZooKeeper if necessary.
ifeq ($(WITH_ZOOKEEPER),1)
  LIBS += -lzookeeper_mt
endif

MASTER_OBJ = master/master.o master/http.o master/slaves_manager.o	\
	     master/frameworks_manager.o master/allocator_factory.o	\
	     master/simple_allocator.o

SLAVE_OBJ = slave/slave.o slave/http.o slave/isolation_module.o		\
	    slave/process_based_isolation_module.o slave/reaper.o	\
	    launcher/launcher.o

ifeq ($(OS_NAME),solaris)
  SLAVE_OBJ += slave/solaris_project_isolation_module.o
endif

ifeq ($(OS_NAME),linux)
  SLAVE_OBJ += slave/lxc_isolation_module.o
endif

PROTOBUF_OBJ = mesos.pb.o messages/messages.pb.o messages/log.pb.o

MASTER_WEBUI_OBJ = master/webui.o

SLAVE_WEBUI_OBJ = slave/webui.o

WEBUI_OBJ = $(MASTER_WEBUI_OBJ) $(SLAVE_WEBUI_OBJ)

COMMON_OBJ = common/fatal.o common/lock.o detector/detector.o		\
	     detector/url_processor.o configurator/configurator.o	\
	     common/string_utils.o common/logging.o			\
	     common/date_utils.o common/tokenize.o common/resources.o

ifeq ($(WITH_ZOOKEEPER),1)
  COMMON_OBJ += common/zookeeper.o
endif

EXEC_LIB_OBJ = exec/exec.o

SCHED_LIB_OBJ = sched/sched.o local/local.o log/replica.o log/coordinator.o

BASIC_OBJ = $(MASTER_OBJ) $(SLAVE_OBJ) $(COMMON_OBJ)  \
	    $(SCHED_LIB_OBJ) $(EXEC_LIB_OBJ)

ALL_OBJ = $(PROTOBUF_OBJ) $(BASIC_OBJ) $(WEBUI_OBJ)

MASTER_EXE_OBJ = $(MASTER_OBJ) $(MASTER_WEBUI_OBJ) $(COMMON_OBJ)	\
                 common/build.o

SLAVE_EXE_OBJ = $(SLAVE_OBJ) $(SLAVE_WEBUI_OBJ) $(COMMON_OBJ)	\
                 common/build.o

LAUNCHER_EXE_OBJ = launcher/launcher.o $(COMMON_OBJ)

LOCAL_EXE_OBJ = local/local.o $(MASTER_OBJ) $(SLAVE_OBJ) $(COMMON_OBJ)	\
		common/build.o

MESOS_MASTER_EXE = $(BINDIR)/mesos-master
MESOS_SLAVE_EXE = $(BINDIR)/mesos-slave
MESOS_LOCAL_EXE = $(BINDIR)/mesos-local
MESOS_LAUNCHER_EXE = $(BINDIR)/mesos-launcher
MESOS_GETCONF_EXE = $(BINDIR)/mesos-getconf
MESOS_PROJD_EXE = $(BINDIR)/mesos-projd
MESOS_EXE = $(BINDIR)/mesos

MESOS_EXES = $(MESOS_MASTER_EXE) $(MESOS_SLAVE_EXE) $(MESOS_LOCAL_EXE)	\
             $(MESOS_LAUNCHER_EXE) $(MESOS_GETCONF_EXE) $(MESOS_EXE)

ifeq ($(OS_NAME),solaris)
  MESOS_EXES += $(MESOS_PROJD_EXE)
endif

MESOS_SCHED_LIB = $(LIBDIR)/libmesos_sched.a
MESOS_EXEC_LIB = $(LIBDIR)/libmesos_exec.a

# C/C++ shared library which contains both the scheduler and executor
# libraries, in addition to libglog, libprocess, and libev.
MESOS_LIB_OBJ = 
ifeq ($(OS_NAME),darwin)
  MESOS_LIB = $(LIBDIR)/libmesos.dylib
else
  MESOS_LIB = $(LIBDIR)/libmesos.so
endif

MESOS_LIBS = $(MESOS_LIB) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB)

MESOS_JAVA_LIB_OBJ = java/jni/convert.o java/jni/construct.o		\
	             java/jni/org_apache_mesos_MesosSchedulerDriver.o	\
	             java/jni/org_apache_mesos_MesosExecutorDriver.o

# Java and Python shared libraries which contain everything in
# MESOS_LIB (note, Java requires the use of the .dylib suffix on Mac
# OS X, but at the time Python required the .so suffix even on Mac OS
# X).
ifeq ($(OS_NAME),darwin)
  MESOS_JAVA_LIB = $(LIBDIR)/java/libmesos.dylib
else
  MESOS_JAVA_LIB = $(LIBDIR)/java/libmesos.so
endif

MESOS_JAVA_JAR = $(LIBDIR)/java/mesos.jar

MESOS_PYTHON_LIB = $(LIBDIR)/python/_mesos.so

MESOS_PYTHON_LIB_OBJ = python/native/module.o \
                       python/native/proxy_scheduler.o \
                       python/native/mesos_scheduler_driver_impl.o \
                       python/native/proxy_executor.o \
                       python/native/mesos_executor_driver_impl.o

MESOS_PYTHON_FILE = $(LIBDIR)/python/mesos.py

# We copy all the webui files into the bin directory.
WEBUI_FILES = $(BINDIR)/webui/bottle-0.8.3		\
              $(BINDIR)/webui/common/webui_lib.py	\
              $(BINDIR)/webui/master/framework.tpl	\
              $(BINDIR)/webui/master/index.tpl		\
              $(BINDIR)/webui/master/webui.py		\
              $(BINDIR)/webui/slave/framework.tpl	\
              $(BINDIR)/webui/slave/index.tpl		\
              $(BINDIR)/webui/slave/webui.py		\
              $(BINDIR)/webui/static/stylesheet.css

# We copy template config files into the conf directory.
CONF_FILES = $(CONFDIR)/mesos.conf $(CONFDIR)/deploy-env.sh

# We copy all the deploy scripts into the bin directory.
DEPLOY_FILES = $(DEPLOYDIR)/deploy-to-slaves             \
	       $(DEPLOYDIR)/mesos-daemon                 \
	       $(DEPLOYDIR)/mesos-env.sh                 \
	       $(DEPLOYDIR)/start-masters                \
	       $(DEPLOYDIR)/start-mesos                  \
	       $(DEPLOYDIR)/start-slaves                 \
	       $(DEPLOYDIR)/stop-masters                 \
	       $(DEPLOYDIR)/stop-mesos                   \
	       $(DEPLOYDIR)/stop-slaves                  \

# Create rules for building the directories that aren't created
# automagically by configure.
OBJ_DIRECTORIES = common configurator detector exec launcher local log	\
                  master messages sched slave

WEBUI_DIRECTORIES = $(BINDIR)/webui/common $(BINDIR)/webui/master	\
                    $(BINDIR)/webui/slave $(BINDIR)/webui/static

DIRECTORIES = $(INCLUDEDIR) $(INCLUDEDIR)/mesos $(BINDIR) $(LIBDIR)	\
              $(LIBDIR)/java $(LIBDIR)/python $(CONFDIR) $(DEPLOYDIR)	\
              $(OBJ_DIRECTORIES) $(WEBUI_DIRECTORIES)


default: all

-include $(patsubst %.o, %.d, $(ALL_OBJ))
-include $(patsubst %, %.d, $(MESOS_EXES))

$(DIRECTORIES): %:
	mkdir -p $@

mesos.pb.cc: @top_srcdir@/include/mesos/mesos.proto
	mkdir -p java/generated
	$(PROTOC) -I@top_srcdir@/include/mesos --cpp_out=. --java_out=java/generated @top_srcdir@/include/mesos/mesos.proto

$(INCLUDEDIR)/mesos/mesos.hpp: mesos.pb.cc | $(INCLUDEDIR) $(INCLUDEDIR)/mesos
	cp mesos.pb.h $(INCLUDEDIR)/mesos/mesos.hpp

# TODO(benh): Clean up how protobuf objects get built.

messages/messages.pb.cc: $(SRCDIR)/messages/messages.proto
	mkdir -p messages
	$(PROTOC) -I$(SRCDIR)/messages -I@top_srcdir@/include/mesos --cpp_out=messages $(SRCDIR)/messages/messages.proto

messages/log.pb.cc: $(SRCDIR)/messages/log.proto
	mkdir -p messages
	$(PROTOC) -I$(SRCDIR)/messages -I@top_srcdir@/include/mesos --cpp_out=messages $(SRCDIR)/messages/log.proto

common/build.o: $(SRCDIR)/common/build.cpp force | common
	$(CXX) -c $(CXXFLAGS) -DBUILD_DATE="\"$$(date '+%Y-%m-%d %H:%M:%S')\"" -DBUILD_USER="\"$$USER\"" -DBUILD_FLAGS="\"$(CFLAGS) $(CXXFLAGS)\"" -o $@ $<

$(PROTOBUF_OBJ): %.pb.o: %.pb.cc $(INCLUDEDIR)/mesos/mesos.hpp
	$(CXX) -c $(CXXFLAGS) -I@top_srcdir@/$(PROTOBUF)/src -I. -o $@ $<

$(BASIC_OBJ): %.o: $(SRCDIR)/%.cpp $(PROTOBUF_OBJ) | $(OBJ_DIRECTORIES)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

$(WEBUI_OBJ): %.o: $(SRCDIR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $(WEBUI_CXXFLAGS) -o $@ $<

$(MESOS_LIBS): $(COMMON_OBJ) | $(LIBDIR)

$(MESOS_SCHED_LIB):$(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ) $(PROTOBUF_OBJ) common/build.o
	$(AR) rcs $@ $^

$(MESOS_EXEC_LIB): $(EXEC_LIB_OBJ) $(PROTOBUF_OBJ) common/build.o
	$(AR) rcs $@ $^

$(MESOS_LIB): $(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ) $(EXEC_LIB_OBJ) $(PROTOBUF_OBJ) common/build.o
	$(CXX) $(CXXFLAGS) -shared -o $@ $^ $(LDFLAGS) $(LIBS)

$(MESOS_EXES): | $(BINDIR)

$(MESOS_MASTER_EXE): $(SRCDIR)/master/main.cpp $(MASTER_EXE_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(MASTER_EXE_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

$(MESOS_SLAVE_EXE): $(SRCDIR)/slave/main.cpp $(SLAVE_EXE_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(SLAVE_EXE_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

$(MESOS_LAUNCHER_EXE): $(SRCDIR)/launcher/main.cpp $(LAUNCHER_EXE_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LAUNCHER_EXE_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_LOCAL_EXE): $(SRCDIR)/local/main.cpp $(LOCAL_EXE_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LOCAL_EXE_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_GETCONF_EXE): $(SRCDIR)/configurator/get_conf.cpp $(COMMON_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(COMMON_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_PROJD_EXE): $(SRCDIR)/slave/projd.cpp $(COMMON_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(COMMON_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_EXE): $(SRCDIR)/mesos/main.cpp $(COMMON_OBJ) $(PROTOBUF_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(COMMON_OBJ) $(PROTOBUF_OBJ) $(LDFLAGS) $(LIBS)

java: $(MESOS_JAVA_LIB) $(MESOS_JAVA_JAR)

$(MESOS_JAVA_JAR): $(SRCDIR)/java/src/org/apache/mesos/*.java @top_srcdir@/include/mesos/mesos.proto | $(LIBDIR)/java
ifdef JAVA_HOME
	mkdir -p @top_builddir@/$(PROTOBUF)/java/src/main/java
	$(PROTOC) --java_out=@top_builddir@/$(PROTOBUF)/java/src/main/java -I@top_srcdir@/$(PROTOBUF)/src @top_srcdir@/$(PROTOBUF)/src/google/protobuf/descriptor.proto
	$(JAVA_HOME)/bin/javac -d @top_builddir@/$(PROTOBUF)/java/src/main/java @top_srcdir@/$(PROTOBUF)/java/src/main/java/com/google/protobuf/*.java @top_builddir@/$(PROTOBUF)/java/src/main/java/com/google/protobuf/*.java
	rm -f java/classes/org/apache/mesos/*
	mkdir -p java/classes/org/apache/mesos
	$(JAVA_HOME)/bin/javac -classpath @top_builddir@/$(PROTOBUF)/java/src/main/java -sourcepath java/generated -d java/classes java/generated/org/apache/mesos/*.java
	$(JAVA_HOME)/bin/javac -classpath @top_builddir@/$(PROTOBUF)/java/src/main/java:java/classes -sourcepath $(SRCDIR)/java/src -d java/classes $(SRCDIR)/java/src/org/apache/mesos/*.java
	$(JAVA_HOME)/bin/jar cf $@ -C java/classes org
	$(JAVA_HOME)/bin/javah -d java/jni -classpath @top_builddir@/$(PROTOBUF)/java/src/main/java:java/classes org.apache.mesos.MesosSchedulerDriver
	$(JAVA_HOME)/bin/javah -d java/jni -classpath @top_builddir@/$(PROTOBUF)/java/src/main/java:java/classes org.apache.mesos.MesosExecutorDriver
endif

$(MESOS_JAVA_LIB_OBJ): %.o: $(SRCDIR)/%.cpp $(MESOS_JAVA_JAR)
	$(CXX) -c $(CXXFLAGS) -Ijava/jni -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(OS_NAME) -I$(JAVA_HEADERS) -o $@ $<

$(MESOS_JAVA_LIB): $(MESOS_JAVA_LIB_OBJ) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) | $(LIBDIR)/java
ifdef JAVA_HOME
	$(CXX) $(CXXFLAGS) -shared -o $@ $(MESOS_JAVA_LIB_OBJ) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(LIBS)
endif

python: $(MESOS_PYTHON_LIB) $(MESOS_PYTHON_FILE) $(MESOS_PYTHON_PROTOBUFS)

$(MESOS_PYTHON_LIB_OBJ): %.o: $(SRCDIR)/%.cpp
ifdef PYTHON_HEADERS
	mkdir -p python/native
	$(CXX) -c $(CXXFLAGS) -Ipython/native -I$(PYTHON_HEADERS) -o $@ $<
endif

$(MESOS_PYTHON_LIB): $(MESOS_PYTHON_LIB_OBJ) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) | $(LIBDIR)/python
ifdef PYTHON_HEADERS
	$(CXX) $(CXXFLAGS) -shared -o $@ $(MESOS_PYTHON_LIB_OBJ) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(PYTHON_LDFLAGS) $(LIBS)
endif

$(MESOS_PYTHON_FILE): $(SRCDIR)/python/src/mesos.py @top_srcdir@/include/mesos/mesos.proto | $(LIBDIR)/python
ifdef PYTHON_HEADERS
ifneq (@top_srcdir@, @top_builddir@)
	cp -r @top_srcdir@/$(PROTOBUF)/python @top_builddir@/$(PROTOBUF)/python
endif
	cp $< $@
	$(PROTOC) --python_out=@top_builddir@/$(PROTOBUF)/python -I@top_srcdir@/$(PROTOBUF)/src @top_srcdir@/$(PROTOBUF)/src/google/protobuf/descriptor.proto
	$(PROTOC) --python_out=$(LIBDIR)/python -I@top_srcdir@/include/mesos @top_srcdir@/include/mesos/mesos.proto
endif

$(WEBUI_FILES): $(BINDIR)/%: $(SRCDIR)/% | $(WEBUI_DIRECTORIES)
ifeq ($(WITH_WEBUI),1)
	cp -r $< $@
endif

$(DEPLOY_FILES): $(DEPLOYDIR)/%: $(SRCDIR)/deploy/% | $(DEPLOYDIR)
	cp -r $< $@

$(CONFDIR)/mesos.conf: | $(SRCDIR)/conf/mesos.conf.template $(CONFDIR)
	cp -r $(SRCDIR)/conf/mesos.conf.template $@

$(CONFDIR)/deploy-env.sh: | $(SRCDIR)/conf/deploy-env.sh.template $(CONFDIR)
	cp -r $(SRCDIR)/conf/deploy-env.sh.template $@

test: all
	$(MAKE) -C tests test

all: $(MESOS_LIBS) $(MESOS_EXES) java python $(WEBUI_FILES) $(CONF_FILES) $(DEPLOY_FILES)
	$(MAKE) -C examples
	$(MAKE) -C tests

clean:
	$(MAKE) -C examples clean
	$(MAKE) -C tests clean
	rm -f $(patsubst %.o, %.d, $(ALL_OBJ))
	rm -f $(patsubst %, %.d, $(MESOS_EXES))
	rm -rf $(patsubst %, %.dSYM, $(MESOS_EXES))
	rm -f $(ALL_OBJ)
	rm -f $(MESOS_EXES) $(MESOS_LIBS)
	rm -f $(MESOS_JAVA_JAR)
	rm -rf $(patsubst %.so, %.d, $(MESOS_JAVA_LIB))
	rm -rf $(patsubst %.dylib, %.d, $(MESOS_JAVA_LIB))
	rm -rf $(patsubst %.so, %.d, $(MESOS_PYTHON_LIB))
	rm -rf $(MESOS_JAVA_LIB).dSYM $(MESOS_PYTHON_LIB).dSYM
	rm -f $(MESOS_JAVA_LIB) $(MESOS_PYTHON_LIB)
	rm -rf $(WEBUI_FILES)
	rm -f java/jni/org_apache_mesos_MesosSchedulerDriver.h
	rm -f java/jni/org_apache_mesos_MesosSchedulerDriver.o
	rm -f java/jni/org_apache_mesos_MesosSchedulerDriver.d
	rm -f java/jni/org_apache_mesos_MesosExecutorDriver.h
	rm -f java/jni/org_apache_mesos_MesosExecutorDriver.o
	rm -f java/jni/org_apache_mesos_MesosExecutorDriver.d
	rm -f $(LIBDIR)/python/mesos.py
	rm -f $(LIBDIR)/python/mesos.pyc
	rm -f $(DEPLOY_FILES)
	rm -f $(INCLUDEDIR)/mesos/mesos.hpp
	rm -f mesos.pb.cc
	rm -f mesos.pb.h
	rm -f TAGS

.PHONY: default java python test all clean force
